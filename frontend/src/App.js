import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';

// Import AuthContext
import { AuthProvider, useAuth } from './components/contexts/AuthContext';

// Import components
import ModernNavbar from './components/Auth/Navbar';
import Homepage from './pages/HomePage';
import LoginPage from './components/Auth/LoginPage';
import RegisterPage from './components/Auth/RegisterPage';
import Dashboard from './pages/DashBoard';

// Import updated constants
import { USER_ROLES, PERMISSIONS } from './components/constants/TaskConstants';

// Loading screen component
const LoadingScreen = () => (
  <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0]" style={{ fontFamily: 'Inter, sans-serif' }}>
    <div className="text-center">
      <div className="animate-spin rounded-full h-16 w-16 border-4 border-[#FFD35B] border-t-transparent mx-auto mb-4 shadow-[0_8px_24px_rgba(255,211,91,0.3)]"></div>
      <h2 className="text-xl font-bold text-gray-800 mb-2">Stratix</h2>
      <p className="text-gray-600">ƒêang kh·ªüi ƒë·ªông ·ª©ng d·ª•ng...</p>
    </div>
  </div>
);

// Protected route wrapper
const ProtectedRoute = React.memo(({ children }) => {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    return <LoadingScreen />;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  return children;
});

// Public route wrapper (redirect if logged in)
const PublicRoute = React.memo(({ children }) => {
  const { isAuthenticated, isLoading } = useAuth();

  if (isLoading) {
    return <LoadingScreen />;
  }

  if (isAuthenticated) {
    return <Navigate to="/dashboard" replace />;
  }

  return children;
});

// Admin route wrapper
const AdminRoute = React.memo(({ children }) => {
  const { isAuthenticated, isLoading, hasLevel } = useAuth();

  if (isLoading) {
    return <LoadingScreen />;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  if (!hasLevel(2)) { // Ch·ªâ Admin v√† Director
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0]" style={{ fontFamily: 'Inter, sans-serif' }}>
        <div className="text-center max-w-md mx-auto p-8">
          <div className="w-16 h-16 bg-red-50 rounded-3xl flex items-center justify-center mx-auto mb-4 shadow-[inset_0_2px_8px_rgba(239,68,68,0.1)]">
            <span className="text-2xl">üîí</span>
          </div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h2>
          <p className="text-gray-600 mb-6">
            T√≠nh nƒÉng n√†y ch·ªâ d√†nh cho Admin v√† Director.
          </p>
          <button
            onClick={() => window.history.back()}
            className="px-6 py-3 bg-gradient-to-r from-[#FFD35B] to-[#F59E0B] text-white rounded-2xl hover:from-[#F59E0B] hover:to-[#FFD35B] transition-all duration-300 font-semibold shadow-[0_8px_24px_rgba(255,211,91,0.3)] hover:scale-105"
          >
            Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return children;
});

// Error Boundary component
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('App Error Boundary caught an error:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0]" style={{ fontFamily: 'Inter, sans-serif' }}>
          <div className="text-center max-w-md mx-auto p-8">
            <div className="w-16 h-16 bg-red-50 rounded-3xl flex items-center justify-center mx-auto mb-4 shadow-[inset_0_2px_8px_rgba(239,68,68,0.1)]">
              <span className="text-2xl">‚ö†Ô∏è</span>
            </div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">C√≥ l·ªói x·∫£y ra</h2>
            <p className="text-gray-600 mb-6">
              ·ª®ng d·ª•ng g·∫∑p s·ª± c·ªë b·∫•t ng·ªù. Vui l√≤ng l√†m m·ªõi trang.
            </p>
            <button
              onClick={() => window.location.reload()}
              className="px-6 py-3 bg-gradient-to-r from-[#FFD35B] to-[#F59E0B] text-white rounded-2xl hover:from-[#F59E0B] hover:to-[#FFD35B] transition-all duration-300 font-semibold shadow-[0_8px_24px_rgba(255,211,91,0.3)] hover:scale-105"
            >
              L√†m m·ªõi trang
            </button>
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// Dashboard wrapper component to handle navigation state
const DashboardWrapper = ({ user }) => {
  const [currentView, setCurrentView] = useState('overview');

  const handleViewChange = (view) => {
    setCurrentView(view);
  };

  return (
    <Dashboard
      user={user}
      currentView={currentView}
      onViewChange={handleViewChange}
    />
  );
};

// Main App component content (inside AuthProvider)
const AppContent = () => {
  const { user, isLoading, isAuthenticated, logout, login, register } = useAuth();
  const [showNav, setShowNav] = useState(false);
  const [currentView, setCurrentView] = useState('overview');
  const location = useLocation();

  // Navigation animation
  useEffect(() => {
    const timer = setTimeout(() => setShowNav(true), 500);
    return () => clearTimeout(timer);
  }, []);

  // Show loading screen during initial auth check
  if (isLoading) {
    return <LoadingScreen />;
  }

  // Handler functions
  const handleLogin = (credentials) => {
    return login(credentials);
  };

  const handleRegister = async (userData) => {
    try {
      const result = await register(userData);
      if (result.success) {
        return result;
      }
    } catch (error) {
      console.error('Register error in App:', error);
      throw error;
    }
  };

  // Handle dashboard navigation
  const handleViewChange = (view) => {
    setCurrentView(view);
  };

  // Check if we're on dashboard page
  const isDashboardPage = location.pathname === '/dashboard' || location.pathname.startsWith('/dashboard/');

  return (
    <div className="App min-h-screen bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0]" style={{ fontFamily: 'Inter, sans-serif' }}>
      {/* Navbar - hi·ªÉn th·ªã tr√™n t·∫•t c·∫£ trang */}
      <ModernNavbar
        isLoggedIn={isAuthenticated}
        user={user}
        onLogout={logout}
        showNav={showNav}
        currentView={isDashboardPage ? currentView : null}
        onViewChange={isDashboardPage ? handleViewChange : null}
      />

      <Routes>
        {/* Public routes */}
        <Route
          path="/"
          element={
            <PublicRoute>
              <Homepage isLoggedIn={isAuthenticated} />
            </PublicRoute>
          }
        />

        <Route
          path="/login"
          element={
            <PublicRoute>
              <LoginPage
                onLogin={handleLogin}
                isLoading={isLoading}
                isLoggedIn={isAuthenticated}
              />
            </PublicRoute>
          }
        />

        <Route
          path="/register"
          element={
            <PublicRoute>
              <RegisterPage
                onRegister={handleRegister}
                isLoading={isLoading}
                isLoggedIn={isAuthenticated}
              />
            </PublicRoute>
          }
        />

        {/* Protected routes */}
        <Route
          path="/dashboard/*"
          element={
            <ProtectedRoute>
              <Dashboard
                user={user}
                currentView={currentView}
                onViewChange={handleViewChange}
              />
            </ProtectedRoute>
          }
        />

        {/* Admin routes - ch·ªâ admin v√† director */}
        <Route
          path="/admin/*"
          element={
            <AdminRoute>
              <div className="p-8 text-center bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0] min-h-screen" style={{ fontFamily: 'Inter, sans-serif' }}>
                <div className="max-w-2xl mx-auto">
                  <div className="w-16 h-16 bg-gradient-to-br from-purple-50 to-purple-100 rounded-3xl flex items-center justify-center mx-auto mb-4 shadow-[inset_0_2px_8px_rgba(147,51,234,0.1)]">
                    <span className="text-2xl">üëë</span>
                  </div>
                  <h1 className="text-3xl font-bold text-gray-800 mb-4">Admin Panel</h1>
                  <p className="text-gray-600 mb-8">
                    Khu v·ª±c qu·∫£n tr·ªã d√†nh cho Admin v√† Director. C√°c t√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="bg-gradient-to-br from-white to-gray-50/30 rounded-3xl p-8 shadow-[0_20px_60px_rgba(0,0,0,0.08),inset_0_1px_0_rgba(255,255,255,0.6)] border border-gray-100/50">
                      <h3 className="font-bold text-gray-800 mb-2">Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h3>
                      <p className="text-sm text-gray-600">T·∫°o, s·ª≠a, x√≥a t√†i kho·∫£n v√† ph√¢n quy·ªÅn</p>
                    </div>
                    <div className="bg-gradient-to-br from-white to-gray-50/30 rounded-3xl p-8 shadow-[0_20px_60px_rgba(0,0,0,0.08),inset_0_1px_0_rgba(255,255,255,0.6)] border border-gray-100/50">
                      <h3 className="font-bold text-gray-800 mb-2">C·∫•u h√¨nh h·ªá th·ªëng</h3>
                      <p className="text-sm text-gray-600">Thi·∫øt l·∫≠p v√† c·∫•u h√¨nh h·ªá th·ªëng</p>
                    </div>
                  </div>
                </div>
              </div>
            </AdminRoute>
          }
        />

        {/* User management routes */}
        <Route
          path="/users/*"
          element={
            <AdminRoute>
              <div className="p-8 text-center bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0] min-h-screen" style={{ fontFamily: 'Inter, sans-serif' }}>
                <div className="max-w-2xl mx-auto">
                  <div className="w-16 h-16 bg-gradient-to-br from-blue-50 to-blue-100 rounded-3xl flex items-center justify-center mx-auto mb-4 shadow-[inset_0_2px_8px_rgba(59,130,246,0.1)]">
                    <span className="text-2xl">üë•</span>
                  </div>
                  <h1 className="text-3xl font-bold text-gray-800 mb-4">Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h1>
                  <p className="text-gray-600 mb-8">
                    Qu·∫£n l√Ω t√†i kho·∫£n, ph√¢n quy·ªÅn v√† c·∫•u tr√∫c t·ªï ch·ª©c.
                  </p>
                  <div className="bg-gradient-to-br from-white to-gray-50/30 rounded-3xl p-8 shadow-[0_20px_60px_rgba(0,0,0,0.08),inset_0_1px_0_rgba(255,255,255,0.6)] border border-gray-100/50">
                    <p className="text-sm text-gray-600">
                      Giao di·ªán qu·∫£n l√Ω ng∆∞·ªùi d√πng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.
                      Hi·ªán t·∫°i b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng API endpoints ƒë·ªÉ qu·∫£n l√Ω.
                    </p>
                  </div>
                </div>
              </div>
            </AdminRoute>
          }
        />

        {/* Reports routes */}
        <Route
          path="/reports/*"
          element={
            <ProtectedRoute>
              <div className="p-8 text-center bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0] min-h-screen" style={{ fontFamily: 'Inter, sans-serif' }}>
                <div className="max-w-2xl mx-auto">
                  <div className="w-16 h-16 bg-gradient-to-br from-emerald-50 to-emerald-100 rounded-3xl flex items-center justify-center mx-auto mb-4 shadow-[inset_0_2px_8px_rgba(16,185,129,0.1)]">
                    <span className="text-2xl">üìä</span>
                  </div>
                  <h1 className="text-3xl font-bold text-gray-800 mb-4">B√°o c√°o & Ph√¢n t√≠ch</h1>
                  <p className="text-gray-600 mb-8">
                    B√°o c√°o chi ti·∫øt v·ªÅ hi·ªáu su·∫•t v√† ti·∫øn ƒë·ªô c√¥ng vi·ªác.
                  </p>
                  <div className="bg-gradient-to-br from-white to-gray-50/30 rounded-3xl p-8 shadow-[0_20px_60px_rgba(0,0,0,0.08),inset_0_1px_0_rgba(255,255,255,0.6)] border border-gray-100/50">
                    <p className="text-sm text-gray-600">
                      T√≠nh nƒÉng b√°o c√°o n√¢ng cao ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.
                      Hi·ªán t·∫°i b·∫°n c√≥ th·ªÉ xem ph√¢n t√≠ch c∆° b·∫£n trong Dashboard.
                    </p>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          }
        />

        {/* Settings routes */}
        <Route
          path="/settings/*"
          element={
            <ProtectedRoute>
              <div className="p-8 text-center bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0] min-h-screen" style={{ fontFamily: 'Inter, sans-serif' }}>
                <div className="max-w-2xl mx-auto">
                  <div className="w-16 h-16 bg-gradient-to-br from-gray-50 to-gray-100 rounded-3xl flex items-center justify-center mx-auto mb-4 shadow-[inset_0_2px_8px_rgba(156,163,175,0.1)]">
                    <span className="text-2xl">‚öôÔ∏è</span>
                  </div>
                  <h1 className="text-3xl font-bold text-gray-800 mb-4">C√†i ƒë·∫∑t</h1>
                  <p className="text-gray-600 mb-8">
                    C√†i ƒë·∫∑t c√° nh√¢n v√† t√πy ch·ªânh giao di·ªán.
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="bg-gradient-to-br from-white to-gray-50/30 rounded-3xl p-8 shadow-[0_20px_60px_rgba(0,0,0,0.08),inset_0_1px_0_rgba(255,255,255,0.6)] border border-gray-100/50">
                      <h3 className="font-bold text-gray-800 mb-2">Th√¥ng tin c√° nh√¢n</h3>
                      <p className="text-sm text-gray-600">C·∫≠p nh·∫≠t th√¥ng tin v√† ƒë·ªïi m·∫≠t kh·∫©u</p>
                    </div>
                    <div className="bg-gradient-to-br from-white to-gray-50/30 rounded-3xl p-8 shadow-[0_20px_60px_rgba(0,0,0,0.08),inset_0_1px_0_rgba(255,255,255,0.6)] border border-gray-100/50">
                      <h3 className="font-bold text-gray-800 mb-2">T√πy ch·ªânh giao di·ªán</h3>
                      <p className="text-sm text-gray-600">Theme, ng√¥n ng·ªØ v√† th√¥ng b√°o</p>
                    </div>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          }
        />

        {/* Profile routes */}
        <Route
          path="/profile/*"
          element={
            <ProtectedRoute>
              <div className="p-8 bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0] min-h-screen" style={{ fontFamily: 'Inter, sans-serif' }}>
                <div className="max-w-4xl mx-auto">
                  <div className="bg-gradient-to-br from-white to-gray-50/30 rounded-3xl shadow-[0_20px_60px_rgba(0,0,0,0.08),inset_0_1px_0_rgba(255,255,255,0.6)] border border-gray-100/50 p-10">
                    <div className="flex items-center space-x-6 mb-8">
                      <div className="w-20 h-20 bg-gradient-to-br from-[#FFD35B] to-[#F59E0B] rounded-3xl flex items-center justify-center text-white text-2xl font-bold shadow-[0_12px_32px_rgba(255,211,91,0.3)]">
                        {user?.full_name?.charAt(0)?.toUpperCase() || user?.username?.charAt(0)?.toUpperCase() || 'U'}
                      </div>
                      <div>
                        <h1 className="text-3xl font-bold text-gray-800">{user?.full_name || user?.username}</h1>
                        <p className="text-lg text-gray-600 font-medium">{user?.role_display_name}</p>
                        <p className="text-sm text-gray-500">{user?.department_name}</p>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                      <div>
                        <h3 className="font-bold text-gray-800 mb-4">Th√¥ng tin t√†i kho·∫£n</h3>
                        <div className="space-y-4">
                          <div>
                            <label className="text-sm font-semibold text-gray-600">Email</label>
                            <p className="text-gray-800 font-medium">{user?.email}</p>
                          </div>
                          <div>
                            <label className="text-sm font-semibold text-gray-600">T√™n ƒëƒÉng nh·∫≠p</label>
                            <p className="text-gray-800 font-medium">{user?.username}</p>
                          </div>
                          <div>
                            <label className="text-sm font-semibold text-gray-600">Ph√≤ng ban</label>
                            <p className="text-gray-800 font-medium">{user?.department_name || 'Ch∆∞a g√°n'}</p>
                          </div>
                        </div>
                      </div>

                      <div>
                        <h3 className="font-bold text-gray-800 mb-4">Quy·ªÅn h·∫°n</h3>
                        <div className="space-y-4">
                          <div>
                            <label className="text-sm font-semibold text-gray-600">Vai tr√≤</label>
                            <p className="text-gray-800 font-medium">{user?.role_display_name}</p>
                          </div>
                          <div>
                            <label className="text-sm font-semibold text-gray-600">C·∫•p ƒë·ªô</label>
                            <p className="text-gray-800 font-medium">Level {user?.role_level}</p>
                          </div>
                          <div>
                            <label className="text-sm font-semibold text-gray-600">Tr·∫°ng th√°i</label>
                            <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-emerald-100 to-emerald-200 text-emerald-800">
                              Ho·∫°t ƒë·ªông
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </ProtectedRoute>
          }
        />

        {/* 404 route */}
        <Route
          path="*"
          element={
            <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#fdfbf7] to-[#f8f6f0]" style={{ fontFamily: 'Inter, sans-serif' }}>
              <div className="text-center max-w-md mx-auto p-8">
                <div className="w-16 h-16 bg-gradient-to-br from-gray-50 to-gray-100 rounded-3xl flex items-center justify-center mx-auto mb-4 shadow-[inset_0_2px_8px_rgba(156,163,175,0.1)]">
                  <span className="text-2xl">üîç</span>
                </div>
                <h2 className="text-2xl font-bold text-gray-800 mb-2">Kh√¥ng t√¨m th·∫•y trang</h2>
                <p className="text-gray-600 mb-6">
                  Trang b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã di chuy·ªÉn.
                </p>
                <div className="space-x-4">
                  <button
                    onClick={() => window.history.back()}
                    className="px-4 py-2 bg-white/70 backdrop-blur-sm text-gray-700 rounded-2xl hover:bg-white/90 transition-all duration-300 font-medium shadow-[0_4px_16px_rgba(0,0,0,0.08)]"
                  >
                    Quay l·∫°i
                  </button>
                  <button
                    onClick={() => window.location.href = isAuthenticated ? '/dashboard' : '/'}
                    className="px-4 py-2 bg-gradient-to-r from-[#FFD35B] to-[#F59E0B] text-white rounded-2xl hover:from-[#F59E0B] hover:to-[#FFD35B] transition-all duration-300 font-semibold shadow-[0_8px_24px_rgba(255,211,91,0.3)] hover:scale-105"
                  >
                    V·ªÅ trang ch·ªß
                  </button>
                </div>
              </div>
            </div>
          }
        />
      </Routes>
    </div>
  );
};

// Root App component with providers
function App() {
  return (
    <ErrorBoundary>
      <AuthProvider>
        <Router>
          <AppContent />
        </Router>
      </AuthProvider>
    </ErrorBoundary>
  );
}

export default App;