{"ast":null,"code":"// API Service để kết nối với Backend mới\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Helper function để handle API responses\nconst handleResponse = async response => {\n  console.log('API Response status:', response.status);\n  console.log('API Response headers:', response.headers);\n  if (!response.ok) {\n    let errorData;\n    try {\n      errorData = await response.json();\n    } catch (e) {\n      // Nếu response không phải JSON\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    console.error('API Error:', errorData);\n    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n  }\n  const data = await response.json();\n  console.log('API Response data:', data);\n  return data;\n};\n\n// Helper function để lấy token từ localStorage\nconst getAuthToken = () => {\n  return localStorage.getItem('accessToken');\n};\n\n// Helper function để set headers với auth\nconst getAuthHeaders = () => {\n  const token = getAuthToken();\n  return {\n    'Content-Type': 'application/json',\n    ...(token && {\n      'Authorization': `Bearer ${token}`\n    })\n  };\n};\n\n// API functions\nexport const api = {\n  // ===== AUTHENTICATION =====\n\n  // Đăng nhập\n  async login(credentials) {\n    console.log('API login called with:', credentials);\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      const data = await handleResponse(response);\n\n      // Lưu tokens vào localStorage\n      if (data.accessToken) {\n        localStorage.setItem('accessToken', data.accessToken);\n      }\n      if (data.refreshToken) {\n        localStorage.setItem('refreshToken', data.refreshToken);\n      }\n      console.log('Login successful, returning:', data);\n      return data;\n    } catch (error) {\n      console.error('Error during login:', error);\n      throw error;\n    }\n  },\n  // Đăng ký\n  async register(userData) {\n    console.log('API register called with:', userData);\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      const data = await handleResponse(response);\n\n      // Lưu tokens vào localStorage nếu có\n      if (data.accessToken) {\n        localStorage.setItem('accessToken', data.accessToken);\n      }\n      if (data.refreshToken) {\n        localStorage.setItem('refreshToken', data.refreshToken);\n      }\n      console.log('Register successful, returning:', data);\n      return data;\n    } catch (error) {\n      console.error('Error during registration:', error);\n      throw error;\n    }\n  },\n  // Đăng xuất\n  async logout() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      const response = await fetch(`${API_BASE_URL}/auth/logout`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n\n      // Luôn xóa tokens dù có lỗi hay không\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      if (response.ok) {\n        const data = await response.json();\n        return data;\n      }\n      return {\n        message: 'Đăng xuất thành công'\n      };\n    } catch (error) {\n      console.error('Error during logout:', error);\n      // Vẫn xóa tokens dù có lỗi\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      throw error;\n    }\n  },\n  // Lấy thông tin user hiện tại\n  async getCurrentUser() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      throw error;\n    }\n  },\n  // Refresh token\n  async refreshToken() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      const data = await handleResponse(response);\n      if (data.accessToken) {\n        localStorage.setItem('accessToken', data.accessToken);\n      }\n      return data;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      // Nếu refresh fail, xóa tokens và redirect về login\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      throw error;\n    }\n  },\n  // Đổi mật khẩu\n  async changePassword(passwordData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/change-password`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(passwordData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error changing password:', error);\n      throw error;\n    }\n  },\n  // ===== TASKS =====\n\n  // Lấy tất cả tasks\n  async getTasks(params = {}) {\n    try {\n      const queryParams = new URLSearchParams(params).toString();\n      const url = `${API_BASE_URL}/tasks${queryParams ? `?${queryParams}` : ''}`;\n      const response = await fetch(url, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      throw error;\n    }\n  },\n  // Lấy task theo ID\n  async getTaskById(id) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks/${id}`, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error fetching task:', error);\n      throw error;\n    }\n  },\n  // Tạo task mới\n  async createTask(taskData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(taskData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error creating task:', error);\n      throw error;\n    }\n  },\n  // Cập nhật task\n  async updateTask(id, taskData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks/${id}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(taskData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error updating task:', error);\n      throw error;\n    }\n  },\n  // Cập nhật status task (cho Kanban)\n  async updateTaskStatus(id, status) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks/${id}/status`, {\n        method: 'PATCH',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          status\n        })\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      throw error;\n    }\n  },\n  // Xóa task\n  async deleteTask(id) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks/${id}`, {\n        method: 'DELETE',\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      throw error;\n    }\n  },\n  // Lấy thống kê tasks\n  async getTasksStats(params = {}) {\n    try {\n      const queryParams = new URLSearchParams(params).toString();\n      const url = `${API_BASE_URL}/tasks/stats${queryParams ? `?${queryParams}` : ''}`;\n      const response = await fetch(url, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error fetching tasks stats:', error);\n      throw error;\n    }\n  },\n  // ===== USER MANAGEMENT =====\n\n  // Lấy danh sách users\n  async getUsers(params = {}) {\n    try {\n      const queryParams = new URLSearchParams(params).toString();\n      const url = `${API_BASE_URL}/users${queryParams ? `?${queryParams}` : ''}`;\n      const response = await fetch(url, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      throw error;\n    }\n  },\n  // Lấy user theo ID\n  async getUserById(id) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error fetching user:', error);\n      throw error;\n    }\n  },\n  // Tạo user mới\n  async createUser(userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(userData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  },\n  // Cập nhật user\n  async updateUser(id, userData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n        method: 'PUT',\n        headers: getAuthHeaders(),\n        body: JSON.stringify(userData)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  },\n  // Kích hoạt/vô hiệu hóa user\n  async toggleUserStatus(id, isActive) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/${id}/status`, {\n        method: 'PATCH',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          isActive\n        })\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error toggling user status:', error);\n      throw error;\n    }\n  },\n  // Xóa user\n  async deleteUser(id) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n        method: 'DELETE',\n        headers: getAuthHeaders()\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      throw error;\n    }\n  },\n  // Reset password user\n  async resetUserPassword(id, newPassword) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/users/${id}/reset-password`, {\n        method: 'POST',\n        headers: getAuthHeaders(),\n        body: JSON.stringify({\n          newPassword\n        })\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error resetting user password:', error);\n      throw error;\n    }\n  }\n};\n\n// Interceptor để tự động refresh token khi expired\nconst originalFetch = window.fetch;\nwindow.fetch = async function (...args) {\n  let response = await originalFetch(...args);\n\n  // Nếu response là 401 (Unauthorized) và có refresh token\n  if (response.status === 401 && localStorage.getItem('refreshToken')) {\n    console.log('Access token expired, attempting to refresh...');\n    try {\n      var _args$, _args$$headers;\n      // Thử refresh token\n      await api.refreshToken();\n\n      // Retry request với token mới\n      const newToken = localStorage.getItem('accessToken');\n      if (newToken && (_args$ = args[1]) !== null && _args$ !== void 0 && (_args$$headers = _args$.headers) !== null && _args$$headers !== void 0 && _args$$headers.Authorization) {\n        args[1].headers.Authorization = `Bearer ${newToken}`;\n        response = await originalFetch(...args);\n      }\n    } catch (refreshError) {\n      // Nếu refresh fail, redirect về login\n      console.error('Token refresh failed:', refreshError);\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n\n      // Only redirect if we're not already on login page\n      if (!window.location.pathname.includes('/login')) {\n        window.location.href = '/login';\n      }\n    }\n  }\n  return response;\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","handleResponse","response","console","log","status","headers","ok","errorData","json","e","Error","error","message","data","getAuthToken","localStorage","getItem","getAuthHeaders","token","api","login","credentials","fetch","method","body","JSON","stringify","accessToken","setItem","refreshToken","register","userData","logout","removeItem","getCurrentUser","changePassword","passwordData","getTasks","params","queryParams","URLSearchParams","toString","url","getTaskById","id","createTask","taskData","updateTask","updateTaskStatus","deleteTask","getTasksStats","getUsers","getUserById","createUser","updateUser","toggleUserStatus","isActive","deleteUser","resetUserPassword","newPassword","originalFetch","window","args","_args$","_args$$headers","newToken","Authorization","refreshError","location","pathname","includes","href"],"sources":["D:/Stratix/frontend/src/services/api.js"],"sourcesContent":["// API Service để kết nối với Backend mới\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\n// Helper function để handle API responses\r\nconst handleResponse = async (response) => {\r\n    console.log('API Response status:', response.status);\r\n    console.log('API Response headers:', response.headers);\r\n\r\n    if (!response.ok) {\r\n        let errorData;\r\n        try {\r\n            errorData = await response.json();\r\n        } catch (e) {\r\n            // Nếu response không phải JSON\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        console.error('API Error:', errorData);\r\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('API Response data:', data);\r\n    return data;\r\n};\r\n\r\n// Helper function để lấy token từ localStorage\r\nconst getAuthToken = () => {\r\n    return localStorage.getItem('accessToken');\r\n};\r\n\r\n// Helper function để set headers với auth\r\nconst getAuthHeaders = () => {\r\n    const token = getAuthToken();\r\n    return {\r\n        'Content-Type': 'application/json',\r\n        ...(token && { 'Authorization': `Bearer ${token}` })\r\n    };\r\n};\r\n\r\n// API functions\r\nexport const api = {\r\n    // ===== AUTHENTICATION =====\r\n\r\n    // Đăng nhập\r\n    async login(credentials) {\r\n        console.log('API login called with:', credentials);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(credentials),\r\n            });\r\n\r\n            const data = await handleResponse(response);\r\n\r\n            // Lưu tokens vào localStorage\r\n            if (data.accessToken) {\r\n                localStorage.setItem('accessToken', data.accessToken);\r\n            }\r\n            if (data.refreshToken) {\r\n                localStorage.setItem('refreshToken', data.refreshToken);\r\n            }\r\n\r\n            console.log('Login successful, returning:', data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error during login:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Đăng ký\r\n    async register(userData) {\r\n        console.log('API register called with:', userData);\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/auth/register`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(userData),\r\n            });\r\n\r\n            const data = await handleResponse(response);\r\n\r\n            // Lưu tokens vào localStorage nếu có\r\n            if (data.accessToken) {\r\n                localStorage.setItem('accessToken', data.accessToken);\r\n            }\r\n            if (data.refreshToken) {\r\n                localStorage.setItem('refreshToken', data.refreshToken);\r\n            }\r\n\r\n            console.log('Register successful, returning:', data);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error during registration:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Đăng xuất\r\n    async logout() {\r\n        try {\r\n            const refreshToken = localStorage.getItem('refreshToken');\r\n\r\n            const response = await fetch(`${API_BASE_URL}/auth/logout`, {\r\n                method: 'POST',\r\n                headers: getAuthHeaders(),\r\n                body: JSON.stringify({ refreshToken }),\r\n            });\r\n\r\n            // Luôn xóa tokens dù có lỗi hay không\r\n            localStorage.removeItem('accessToken');\r\n            localStorage.removeItem('refreshToken');\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                return data;\r\n            }\r\n\r\n            return { message: 'Đăng xuất thành công' };\r\n        } catch (error) {\r\n            console.error('Error during logout:', error);\r\n            // Vẫn xóa tokens dù có lỗi\r\n            localStorage.removeItem('accessToken');\r\n            localStorage.removeItem('refreshToken');\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Lấy thông tin user hiện tại\r\n    async getCurrentUser() {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/auth/me`, {\r\n                headers: getAuthHeaders(),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error getting current user:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Refresh token\r\n    async refreshToken() {\r\n        try {\r\n            const refreshToken = localStorage.getItem('refreshToken');\r\n            if (!refreshToken) {\r\n                throw new Error('No refresh token available');\r\n            }\r\n\r\n            const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ refreshToken }),\r\n            });\r\n\r\n            const data = await handleResponse(response);\r\n\r\n            if (data.accessToken) {\r\n                localStorage.setItem('accessToken', data.accessToken);\r\n            }\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error refreshing token:', error);\r\n            // Nếu refresh fail, xóa tokens và redirect về login\r\n            localStorage.removeItem('accessToken');\r\n            localStorage.removeItem('refreshToken');\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Đổi mật khẩu\r\n    async changePassword(passwordData) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/auth/change-password`, {\r\n                method: 'PUT',\r\n                headers: getAuthHeaders(),\r\n                body: JSON.stringify(passwordData),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error changing password:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // ===== TASKS =====\r\n\r\n    // Lấy tất cả tasks\r\n    async getTasks(params = {}) {\r\n        try {\r\n            const queryParams = new URLSearchParams(params).toString();\r\n            const url = `${API_BASE_URL}/tasks${queryParams ? `?${queryParams}` : ''}`;\r\n\r\n            const response = await fetch(url, {\r\n                headers: getAuthHeaders(),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Lấy task theo ID\r\n    async getTaskById(id) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/tasks/${id}`, {\r\n                headers: getAuthHeaders(),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error fetching task:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Tạo task mới\r\n    async createTask(taskData) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/tasks`, {\r\n                method: 'POST',\r\n                headers: getAuthHeaders(),\r\n                body: JSON.stringify(taskData),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error creating task:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Cập nhật task\r\n    async updateTask(id, taskData) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/tasks/${id}`, {\r\n                method: 'PUT',\r\n                headers: getAuthHeaders(),\r\n                body: JSON.stringify(taskData),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error updating task:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Cập nhật status task (cho Kanban)\r\n    async updateTaskStatus(id, status) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/tasks/${id}/status`, {\r\n                method: 'PATCH',\r\n                headers: getAuthHeaders(),\r\n                body: JSON.stringify({ status }),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error updating task status:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Xóa task\r\n    async deleteTask(id) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/tasks/${id}`, {\r\n                method: 'DELETE',\r\n                headers: getAuthHeaders(),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error deleting task:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Lấy thống kê tasks\r\n    async getTasksStats(params = {}) {\r\n        try {\r\n            const queryParams = new URLSearchParams(params).toString();\r\n            const url = `${API_BASE_URL}/tasks/stats${queryParams ? `?${queryParams}` : ''}`;\r\n\r\n            const response = await fetch(url, {\r\n                headers: getAuthHeaders(),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error fetching tasks stats:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // ===== USER MANAGEMENT =====\r\n\r\n    // Lấy danh sách users\r\n    async getUsers(params = {}) {\r\n        try {\r\n            const queryParams = new URLSearchParams(params).toString();\r\n            const url = `${API_BASE_URL}/users${queryParams ? `?${queryParams}` : ''}`;\r\n\r\n            const response = await fetch(url, {\r\n                headers: getAuthHeaders(),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error fetching users:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Lấy user theo ID\r\n    async getUserById(id) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/users/${id}`, {\r\n                headers: getAuthHeaders(),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error fetching user:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Tạo user mới\r\n    async createUser(userData) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/users`, {\r\n                method: 'POST',\r\n                headers: getAuthHeaders(),\r\n                body: JSON.stringify(userData),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error creating user:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Cập nhật user\r\n    async updateUser(id, userData) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/users/${id}`, {\r\n                method: 'PUT',\r\n                headers: getAuthHeaders(),\r\n                body: JSON.stringify(userData),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error updating user:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Kích hoạt/vô hiệu hóa user\r\n    async toggleUserStatus(id, isActive) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/users/${id}/status`, {\r\n                method: 'PATCH',\r\n                headers: getAuthHeaders(),\r\n                body: JSON.stringify({ isActive }),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error toggling user status:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Xóa user\r\n    async deleteUser(id) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/users/${id}`, {\r\n                method: 'DELETE',\r\n                headers: getAuthHeaders(),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error deleting user:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Reset password user\r\n    async resetUserPassword(id, newPassword) {\r\n        try {\r\n            const response = await fetch(`${API_BASE_URL}/users/${id}/reset-password`, {\r\n                method: 'POST',\r\n                headers: getAuthHeaders(),\r\n                body: JSON.stringify({ newPassword }),\r\n            });\r\n\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error resetting user password:', error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\n// Interceptor để tự động refresh token khi expired\r\nconst originalFetch = window.fetch;\r\nwindow.fetch = async function (...args) {\r\n    let response = await originalFetch(...args);\r\n\r\n    // Nếu response là 401 (Unauthorized) và có refresh token\r\n    if (response.status === 401 && localStorage.getItem('refreshToken')) {\r\n        console.log('Access token expired, attempting to refresh...');\r\n\r\n        try {\r\n            // Thử refresh token\r\n            await api.refreshToken();\r\n\r\n            // Retry request với token mới\r\n            const newToken = localStorage.getItem('accessToken');\r\n            if (newToken && args[1]?.headers?.Authorization) {\r\n                args[1].headers.Authorization = `Bearer ${newToken}`;\r\n                response = await originalFetch(...args);\r\n            }\r\n        } catch (refreshError) {\r\n            // Nếu refresh fail, redirect về login\r\n            console.error('Token refresh failed:', refreshError);\r\n            localStorage.removeItem('accessToken');\r\n            localStorage.removeItem('refreshToken');\r\n\r\n            // Only redirect if we're not already on login page\r\n            if (!window.location.pathname.includes('/login')) {\r\n                window.location.href = '/login';\r\n            }\r\n        }\r\n    }\r\n\r\n    return response;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}